// This file was generated by ChatGPT parce que j'ai pas le temps ni les connaissances pour faire tout ça

import type { SystemModeValue } from 'mode-watcher';
import { hashString } from './crypto';

export type ColorPair = { background: string; foreground: string };

/**
 * Converts HSL color values to RGB.
 */
export function hslToRgb(h: number, s: number, l: number): [number, number, number] {
  s /= 100;
  l /= 100;

  const k = (n: number) => (n + h / 30) % 12;
  const a = s * Math.min(l, 1 - l);
  const f = (n: number) => l - a * Math.max(-1, Math.min(k(n) - 3, Math.min(9 - k(n), 1)));

  return [255 * f(0), 255 * f(8), 255 * f(4)];
}

/**
 * Converts RGB values to HEX string.
 */
export function rgbToHex(r: number, g: number, b: number): string {
  return (
    '#' +
    [r, g, b]
      .map((x) => {
        const hex = Math.round(x).toString(16);
        return hex.length === 1 ? '0' + hex : hex;
      })
      .join('')
  );
}

/**
 * Calculates relative luminance of an RGB color.
 * Returns value in [0,1].
 */
export function luminance(r: number, g: number, b: number): number {
  const srgb = [r, g, b].map((v) => {
    const c = v / 255;
    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  });

  return 0.2126 * srgb[0] + 0.7152 * srgb[1] + 0.0722 * srgb[2];
}

/**
 * Calculates WCAG contrast ratio between two RGB colors.
 */
export function contrastRatio(
  rgb1: [number, number, number],
  rgb2: [number, number, number]
): number {
  const lum1 = luminance(...rgb1);
  const lum2 = luminance(...rgb2);

  const brightest = Math.max(lum1, lum2);
  const darkest = Math.min(lum1, lum2);

  return (brightest + 0.05) / (darkest + 0.05);
}

/**
 * Generate a background/foreground color pair.
 * - Pastel backgrounds in light mode
 * - Muted dark backgrounds in dark mode
 * - Foreground always adjusted for WCAG 4.5:1 contrast
 */
export function generateColorPair(
  seed: string | null = null,
  systemMode: SystemModeValue = 'light'
): ColorPair {
  const base = seed ? hashString(seed) : Math.floor(Math.random() * 1e9);
  const darkMode = systemMode === 'dark';

  const h = base % 360;

  // 🎨 Background HSL based on mode
  const s = darkMode ? 20 + (base % 20) : 30 + (base % 30); // lower saturation in dark
  const l = darkMode
    ? 15 + (Math.floor(base / 360) % 15) // 15–30% for dark backgrounds
    : 70 + (Math.floor(base / 360) % 15); // 70–85% for pastel light mode

  const [br, bg, bb] = hslToRgb(h, s, l);
  const background = rgbToHex(br, bg, bb);

  // Initial guess: opposite lightness for text
  let textL = darkMode ? l + 60 : l - 50;
  textL = Math.max(5, Math.min(95, textL));

  let [fr, fg, fb] = hslToRgb(h, s, textL);

  // Ensure WCAG compliance
  let ratio = contrastRatio([br, bg, bb], [fr, fg, fb]);
  while (ratio < 4.5) {
    textL = darkMode ? textL + 5 : textL - 5;
    textL = Math.max(0, Math.min(100, textL));
    [fr, fg, fb] = hslToRgb(h, s, textL);
    ratio = contrastRatio([br, bg, bb], [fr, fg, fb]);
    if (textL === 0 || textL === 100) break;
  }

  const foreground = rgbToHex(fr, fg, fb);

  return { background, foreground };
}
