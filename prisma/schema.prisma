generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id
  username     String  @unique
  firstname    String?
  lastname     String?
  passwordHash String?
  role         Role    @default(Student)

  student     Student?
  teacher     Teacher?
  discordUser DiscordUser?
  sessions    Session[]
}

model Student {
  id   String @id
  user User   @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Teacher {
  id      String  @id
  isAdmin Boolean @default(false)

  courses Course[]

  user User @relation(fields: [id], references: [id], onDelete: Cascade)
}

model Course {
  id   Int    @id @default(autoincrement())
  name String
  icon String

  schoolSessionId Int
  teachers        Teacher[]

  schoolSession SchoolSession @relation(fields: [schoolSessionId], references: [id])
}

model SchoolSession {
  id      Int      @id @default(autoincrement())
  year    Int
  season  Season
  courses Course[]
}

model Session {
  id        String   @id
  publicId  String   @unique
  userId    String
  name      String
  lastUsed  DateTime
  expiresAt DateTime
  createdAt DateTime @default(now()) @db.Timestamptz(3)

  oauthToken OAuthToken?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OAuthToken {
  sessionId    String   @id @unique
  accessToken  String   @unique
  refreshToken String
  expiresAt    DateTime

  session Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model DiscordUser {
  userId    String @id @unique
  discordId String @unique
  username  String
  avatar    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  Student
  Teacher
  Admin
}

enum Season {
  Fall
  Winter
  Summer
}
